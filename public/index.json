[
{
	"uri": "/5-setuphyriddns/5.1-createoe/",
	"title": "Create Route 53 Outbound Endpoint",
	"tags": [],
	"description": "",
	"content": "Create Route 53 Outbound Endpoint To begin, we will create a Route 53 Outbound Endpoint to enable the Route 53 Resolver to forward DNS queries for domains hosted outside of Route 53. When you create a Route 53 Outbound Endpoint, AWS will generate an elastic network interface (ENI) in each specified Availability Zone (AZ).\nAccess the Route 53 console by using the search box and navigating to Route 53. Expand the left sidebar, choose Outbound Endpoints, and then select Create Outbound Endpoint. On the Create Outbound Endpoint page, provide the following details: Endpoint name: R53-OutboundEndpoint VPC in the Region: HybridDNS-VPCStack-. (This refers to the VPC created by CloudFormation in the preceding section) Security group for this endpoint: d-###â€¦.#_controllers. (This is the security group generated by CloudFormation to secure connections to AWS Managed Microsoft Active Directory) Configure IP addresses: For IP address #1: Choose Availability Zone: \u0026ldquo;ap-southeast-1a\u0026rdquo; Select Subnet: \u0026ldquo;Private subnet 1A\u0026rdquo; Choose IP address: \u0026ldquo;Use an IP address that is selected automatically\u0026rdquo; For IP address #2: Choose Availability Zone: \u0026ldquo;ap-southeast-1c\u0026rdquo; Select Subnet: \u0026ldquo;Private subnet 2A\u0026rdquo; Choose IP address: \u0026ldquo;Use an IP address that is selected automatically\u0026rdquo; Finally, click on Create Outbound Endpoint. After approximately 5 minutes, the Outbound Endpoint will be configured within your VPC. Once the Outbound Endpoints are successfully created, click on an Outbound Endpoint to access its details. You will find the IP addresses assigned to the Outbound Endpoints. AWS deploys an elastic network interface (ENI) into your subnet and assigns the specified IP address to this ENI. "
},
{
	"uri": "/2-prerequiste/2.1-createkeypair/",
	"title": "Generate Key Pair",
	"tags": [],
	"description": "",
	"content": "Generate Key Pair To ensure secure access to EC2 instances, AWS uses a private/public key in the form of a key pair. With Windows instances, the key pair is used to obtain the administrator password via the Amazon EC2 console. In this section, you will create a key pair.\nGo to AWS Management Console\nFind EC2 Select EC2 In EC2 interface\nSelect Key Pairs Select Create key pair In the Create key pair interface\nEnter hyrid-DNS for Name Key pair type, select RSA Private key file format, select .pem Select Create key pair Generate key pair successfully.\nImportant: AWS will automatically download the private key pair file with the filename hybrid-DNS.pem. Make sure you have saved the PEM file and remember the save location because you cannot reload this key file. You will have to use it to decrypt the password and connect to the EC2 instance deployed in the next step.\n"
},
{
	"uri": "/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Overview The majority of our current customers utilize an on-premise DNS system. As resources are initialized on the AWS platform, AWS offers DNS services through Amazon Route 53. This lab focuses on creating a hybrid DNS system, enabling integration between your existing on-premise DNS system and the DNS service provided by Amazon Route 53.\nRoute 53 Route 53 offers various DNS capabilities, including:\nPublic DNS domain registration Creation of private DNS zones DNS hybrid engine Domain name resolution Within Route 53, the Route 53 Resolver service introduces three tools to facilitate a hybrid DNS architecture between your on-premise DNS system and AWS:\nOutbound Endpoints: Route 53 Resolver sends DNS queries from AWS to your on-premise DNS system through these endpoints. Inbound Endpoints: These endpoints serve as targets for DNS queries from your on-premise DNS system to domains hosted on AWS. Route 53 Resolver Rules: Utilizing Resolver Rules, you can configure Route 53 to forward DNS queries for specific domains to your on-premise DNS system. "
},
{
	"uri": "/",
	"title": "Set up Hybrid DNS with Route 53 Resolver",
	"tags": [],
	"description": "",
	"content": "Set up Hybrid DNS with Route 53 Resolver Overview The majority of existing customers own an on-premise DNS system. When you initialize resources on the AWS platform, AWS provides DNS service through Amazon Route 53. In this lab, we will explore building a DNS hybrid system that enables integration between your existing on-premise DNS system and the DNS service of Amazon Route 53.\nRoute 53 Route 53 offers various DNS capabilities, including public DNS domain registration, the creation of private DNS zones, a DNS hybrid engine, and domain name resolution. Route 53 Resolver, within Route 53, can perform recursive lookups against public DNS systems.\nWithin Route 53, the Route 53 Resolver service provides three essential tools for establishing a hybrid DNS architecture between your on-premise DNS system and AWS:\nOutbound Endpoints: These are used for sending DNS queries from Route 53 Resolver to your on-premise DNS system. Inbound Endpoints: These act as targets for DNS queries originating from your on-premise DNS system to domains hosted on AWS. Route 53 Resolver Rules: This feature lets you configure Route 53 to forward DNS queries for specific domains to your on-premise system\u0026rsquo;s DNS. Content Introduction Preparation Connect to RDGW Microsoft AD Deployment Setup DNS Resource Cleanup "
},
{
	"uri": "/5-setuphyriddns/5.2-createroute53/",
	"title": "Create Route 53 Resolver Rules",
	"tags": [],
	"description": "",
	"content": "Create Route 53 Resolver Rules The next step involves creating Route 53 Resolver Rules. A Route 53 Resolver rule allows you to define two actions: Forward or System.\nWith the Forward action, you can configure Route 53 Resolver to forward DNS queries to an external DNS resolver (e.g., a DNS server on your premises). With the System action, Route 53 will internally query for domain name resolution (Private DNS zones, VPC DNS, and Public DNS). Open the Route 53 console using the search box and locate Route 53. In the left sidebar, select Rules and then click on Create rule. Fill in the following information: Name: ForwardToOnPremAD Rule type: Forward Domain name: onprem.example.com. (This is the domain name of the directory you created in the previous section) VPC that uses this rule: HybridDNS-VPCStack Outbound Endpoint: R53-OutboundEndpoint Under Target IP addresses, enter the two recorded AWS Managed Microsoft Active Directory IP addresses. Note that you need to select Add target to add a second IP address.\nClick on Submit Complete the process of creating the Route 53 Resolver rule. You have now successfully configured Route 53 Resolver to forward queries for onprem.example.com to another DNS resolver (e.g., AWS Managed Microsoft AD). The domain name, onprem.example.com, simulates a DNS domain hosted by your DNS on-premise system. "
},
{
	"uri": "/2-prerequiste/2.2-launchcloudformation/",
	"title": "Initialize CloudFormation Template",
	"tags": [],
	"description": "",
	"content": "Initialize CloudFormation Template In this step, you will build the network infrastructure in AWS. In this section, you\u0026rsquo;ll leverage the template from AWS Quick Start to build a secure and high availability (HA) network infrastructure using AWS CloudFormation. This is the architecture that will be built from the template.\nHands-on with AWS CloudFormation Login to AWS Management Console\nFind CloudFormation Select CloudFormation In the CloudFormation interface, select Create stack.\nIn the Create stack interface:\nPrepare Template: Template is ready Template Source: Amazon S3 URL Amazon S3 URL: https://aws-quickstart.s3.amazonaws.com/quickstart-microsoft-rdgateway/templates/rdgw-master.template Select Next Implement stack configuration:\nIn Stack name, enter HybridDNS. In Availability Zones, select ap-northeast-1a and ap-northeast-1. Perform Network configuration:\nIn VPC CIDR, Private Subnet 1 \u0026amp; 2 CIDR, and Public Subnet 1 \u0026amp; 2 CIDR, keep the default values. In Allowed Remote Desktop Gateway External Access CIDR, enter 0.0.0.0/0. Note: The warning notice highlights that this configuration allows any IP to remote into the RDP port of the EC2 instance, which is not secure for production.\nIn Amazon EC2 configuration step:\nIn Key Pair Name, select the previously created Key Pair (hybrid-DNS). In Remote Desktop Gateway Instance Type, keep the default value (t2.large). In Number of RDGW Hosts, keep the default value (1). In Admin User Name, keep the default value (StackAdmin). Admin Password, set an easy-to-remember password for you. Note: The note provides additional information about the RDGW hosts and the use of AutoScaling groups for availability and scalability.\nFor other options, keep the default value and select Next.\nSelect Next.\nOn the Review HybridDNS screen, check the settings again. Select the two checkboxes and select Create Stack.\nThe template takes about 15 minutes to complete. In the meantime, we\u0026rsquo;ll take a look at what the CloudFormation template will create. After completing the stack initialization, the stack state will change to CREATE_COMPLETE.\nView Output of the newly created Stack.\n"
},
{
	"uri": "/2-prerequiste/",
	"title": "Preparation ",
	"tags": [],
	"description": "",
	"content": "Preparation Overview Your initial task involves setting up the network infrastructure in AWS. In this segment, you will make use of AWS Quick Start to construct a secure and highly available (HA) network infrastructure. Additionally, you will deploy an instance of AWS Managed Microsoft Active Directory using AWS Directory Service to emulate your on-premises DNS system. Upon completing this stage, you will have successfully implemented the subsequent infrastructure architecture:\nAWS Quick Starts AWS Quick Starts stands as a collection of architectural templates created by Solution Architects and AWS Partners. These templates employ AWS CloudFormation as the underlying tool to build the architectures outlined within them.\nAWS CloudFormation AWS CloudFormation represents AWS\u0026rsquo;s service for Infrastructure as Code (IaC), enabling the creation of infrastructure based on templates written in either YAML or JSON format. A designated template is uploaded to the CloudFormation service, which then automatically generates the infrastructure as defined in the template.\nAWS Directory Service AWS Directory Service provides a mechanism to deploy an Active Directory directly on the AWS Cloud, streamlining management tasks and granting end-user access to AWS services.\nContent Generate Key Pair Initiating CloudFormation Template Security Group Configuration "
},
{
	"uri": "/2-prerequiste/2.3-security/",
	"title": "Configuring Security Group",
	"tags": [],
	"description": "",
	"content": "Configure Security Group Log in to AWS Console and access the EC2 Management Console:\nOpen the AWS Console and search for \u0026ldquo;EC2\u0026rdquo; using the search box. Ensure that you have chosen the correct Region. Look in the upper left corner of the AWS Console and select the desired Region (In this case, we are selecting ap-southeast-1). Within the EC2 interface:\nFrom the left-hand menu, click on Security Groups. Check the checkbox next to the security group with the description \u0026ldquo;Enable RDP access from the Internet\u0026rdquo;. At the bottom of the screen, go to the Inbound tab. Click on Edit inbound rules. Edit the Inbound configuration:\nClick Delete next to the rule that specifies Port Range 3391 to remove the rule. Click Delete next to the rule that specifies Port Range 443 to remove the rule. For the RDP rule in the Source column, choose \u0026ldquo;My IP\u0026rdquo; from the list (for the lab, you can use 0.0.0.0/0). For the ICMP rule in the Source column, choose \u0026ldquo;My IP\u0026rdquo; from the list (for the lab, you can use 0.0.0.0/0). Click Save rules. Finish configuring the security group.\nNote: When securing your application, it\u0026rsquo;s important to open only the ports that your application requires. In this step, you have removed ports 3391 and 443 since they are not needed for this exercise. Additionally, you\u0026rsquo;ve restricted access so that RDP and ICMP connections are allowed only from your public IP address.\n"
},
{
	"uri": "/3-connecttordgw/",
	"title": "Connecting to RDGW",
	"tags": [],
	"description": "",
	"content": "Connect to RDGW In this section, you will learn how to connect to the Remote Desktop Gateway Server (RDGW) instance using the Remote Desktop Protocol (RDP). The process varies depending on your operating system.\nLogin to AWS Console and access the EC2 Management console.\nIn the EC2 interface:\nOn the left menu, select Instances. Check the checkbox next to the RDGW server instance. Click on Connect. In the Connect to instance interface:\nChoose RDP Client and then select \u0026ldquo;Download Remote Desktop File\u0026rdquo; to download the RDP file. Click on Get Password. In the Get Windows password interface:\nClick on Browse and navigate to the location where you saved the key pair file downloaded earlier. Click on Decrypt Password. Once you have the decrypted password, make sure to copy and save it securely.\nLaunch the downloaded RDP file and use the password obtained in the previous step to log in to the RDGW server.\nClick on Connect. Enter the password and click on OK.\nContinue by selecting Yes.\nYou should now see the screen indicating a successful connection to the instance.\n"
},
{
	"uri": "/5-setuphyriddns/5.3-createie/",
	"title": "Create Route 53 Inbound Endpoints",
	"tags": [],
	"description": "",
	"content": "Create Route 53 Inbound Endpoints To enable your on-premise DNS system to query Route 53 Resolver for specific DNS zones (such as Private Zones) hosted on Route 53, you need to set up a Route 53 Inbound Endpoint. This Inbound Endpoint serves as a link for other services to request domain name resolution from Route 53. When you create an Inbound Endpoint, AWS generates an elastic network interface (ENI) in each specified availability zone (AZ) to handle incoming DNS queries.\nAccess the Route 53 console: Search for Route 53 in the search box. Expand the left sidebar, go to Inbound endpoints, and select Create inbound endpoint. On the Create inbound endpoint page, provide the following details: Endpoint name: R53-InboundEndpoint VPC in the Region: HybridDNS-VPCStack- (This VPC was created by CloudFormation in the previous section) Security group for this endpoint: d-###â€¦.#_controllers (This security group was created by CloudFormation to secure the connection to AWS Managed Microsoft Active Directory) Configure IP Addresses: IP address #1: Availability Zone: ap-northeast-1a Subnet: Private subnet 1A IP address: Use an automatically selected IP address IP address #2: Availability Zone: ap-northeast-1c Subnet: Private subnet 2A IP address: Use an automatically selected IP address Click Create inbound endpoint. Complete the creation of the Inbound Endpoint. Once the Inbound Endpoints are successfully created, click on an inbound endpoint to view its details. You will find the IP addresses assigned to these inbound endpoints. AWS injects an elastic network interface (ENI) into your subnet and assigns the specified IP addresses to the ENIs. "
},
{
	"uri": "/4-setupad/",
	"title": "Microsoft AD Deployment",
	"tags": [],
	"description": "",
	"content": "Deploy Microsoft AD To set up DNS emulation on-premises, we will utilize the AWS Directory Service to deploy AWS Managed Microsoft Active Directory in two private subnets created by CloudFormation, as illustrated below:\nLog in to the AWS Console and navigate to the Directory Service console by using the search box and selecting Directory Services.\nEnsure that you have chosen the appropriate Region. Check the top left corner of the AWS Console and select the desired Region (For instance, we\u0026rsquo;re selecting ap-southeast-1).\nIf this is your first time accessing Directory Services in your region, you will be directed to the initial welcome screen. Expand the left sidebar and click on Directories.\nChoose Set up directory. Select Directory types and then choose AWS Managed Microsoft AD.\nOn the \u0026ldquo;Enter Directory Information\u0026rdquo; page, provide the following details:\nFor Edition, select Standard Edition.\nFor Directory DNS name, use onprem.example.com (ensure this DNS name is unique among your directories).\nFor Directory NetBIOS name, use onprem (ensure this NetBIOS name is unique among your directories).\nProceed with the configuration:\nFor Directory Description, use this to simulate the on-prem AD.\nSet an Admin Password that you can remember. Note the password complexity requirements provided on the screen.\nConfirm the password by entering it again.\nClick on Next.\nIn the \u0026ldquo;Choose VPC and subnets\u0026rdquo; section, select the VPC named HybridDNS-VPCStack that we previously created, along with two private subnets: Private subnet 1A and Private subnet 2A. Then, proceed to the next step.\nOn the \u0026ldquo;Review \u0026amp; create\u0026rdquo; screen, carefully review the settings, and then click on Create Directory.\nThe creation of the directory will take approximately 20 minutes. During this time, AWS will provision two Windows servers and promote them to Active Directory domain controllers for the specified AD forest. This forest will be a new AD forest. The process will be marked as complete when the status changes to Active.\nOnce the directory has been successfully created, you can view its details by clicking on the Directory ID. The two DNS IP addresses listed represent the IP addresses of elastic network interfaces (ENI) associated with your availability zone for communication with AWS Managed Microsoft AD Domain Controllers.\n"
},
{
	"uri": "/5-setuphyriddns/5.4-results/",
	"title": "Test results",
	"tags": [],
	"description": "",
	"content": "Test results Connect to RD Gateway Server Use Command Prompt and execute the command: nslookup onprem.example.com Open PowerShell on Windows and execute the command: Resolve-DnsName onprem.example.com "
},
{
	"uri": "/5-setuphyriddns/",
	"title": "Setup DNS",
	"tags": [],
	"description": "",
	"content": "Set up DNS In this lab, you\u0026rsquo;ll utilize three tools: Outbound Endpoint, Resolver Rules, and Inbound Endpoints from Route 53 Resolver to establish a hybrid DNS configuration for your AWS infrastructure and On-premises.\nThe AWS Managed Microsoft Active Directory service, created in the preceding section, will be employed to simulate your on-premise DNS system. The architecture you\u0026rsquo;ll be building upon the existing infrastructure is depicted in the following figure:\nExplanation Red Arrow: Configure an Outbound Endpoint to link Route 53 Resolver for forwarding DNS queries to the AWS Managed Active Directory.\nEstablish a Route 53 Resolver Rule to direct DNS queries from Route 53 Resolver externally to AWS Managed Active Directory.\nBlue Arrow: Set up an Inbound Endpoint to bridge AWS Managed Active Directory for forwarding DNS queries to Route 53 Resolver. Subsequently, Route 53 Resolver can further route these queries to EC2 instances acting as Remote Desktop Gateways.\nGreen Arrow: EC2 instances will connect to Route 53 Resolver using the IP address VPC+2, which is the default IP address for the DNS Resolver of the VPC. (For instance, if VPC CIDR is 10.0.0.0/16, the DNS Resolver\u0026rsquo;s IP address in the VPC is 10.0.0.2).\nBlack Arrow: Route 53 Resolver can forward DNS queries from EC2 instances or AWS Managed Active Directory to other AWS services.\nContent Create Route 53 Outbound Endpoint Create Route 53 Resolver Rules Create Route 53 Inbound Endpoints Test Result Note: Upon completion, you will comprehend how to establish a hybrid DNS configuration between DNS hosted zones on your on-premises system and within AWS. During the exercise, we utilized the AWS Managed Microsoft AD DNS server to mimic the on-premise DNS system. To visualize integration with your actual on-premise environment, replace the IP addresses of your on-premise DNS servers with those of the AWS Managed Microsoft AD DNS.\nTo enable your on-premise DNS servers to resolve AWS Private Zones hosted on Route 53, you would create DNS forwarding rules within your on-premise DNS system. For DNS domains hosted on Route 53, forward to the IP address of the Inbound Endpoint.\n"
},
{
	"uri": "/6-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources Remove inbound endpoint Access to Route 53 Management Console In the left sidebar, select Inbound endpoints Tick the Inbound endpoint related to the lab Select Delete Type Delete in the empty box and press Submit Explanation:\nOpen the Route 53 Management Console in your AWS account. On the left sidebar, find and click on \u0026ldquo;Inbound endpoints.\u0026rdquo; Locate the specific Inbound endpoint associated with the lab. Click on the Delete option. A confirmation box will appear; enter Delete in the provided empty box and click Submit. Remove Resolver Rule Access to Route 53 Management Console In the left sidebar, select Rules Click on the Rule related to the lab to view its information In the VPCs section, select the connected VPC and choose Disassociate Type disassociate in the box and select Submit Wait 1-2 minutes for the disassociation process to complete. In the Rule information page, select Delete Type Delete in the empty box and press Submit Explanation:\nAccess the Route 53 Management Console. From the left sidebar, click on \u0026ldquo;Rules.\u0026rdquo; Locate and click on the specific Rule related to the lab to view its details. Under the VPCs section, select the connected VPC and choose to Disassociate. Type disassociate in the provided box and confirm with Submit. Wait for 1-2 minutes to ensure disconnection from the VPC. Return to the Rule information page, select Delete. Confirm the deletion by typing Delete in the empty box and pressing Submit. Delete Outbound Endpoint Access to Route 53 Management Console In the left sidebar, select Outbound Endpoints Tick the Outbound Endpoint related to the lab Select Delete Type Delete in the empty box and press Submit Explanation:\nOpen the Route 53 Management Console. From the left sidebar, choose \u0026ldquo;Outbound Endpoints.\u0026rdquo; Locate and select the relevant Outbound Endpoint for the lab. Click on Delete. Confirm the deletion by entering Delete in the provided box and clicking Submit. Remove AWS Managed Microsoft Active Directory Access to Directory Service Management Console In the left sidebar, select Directories Tick the Directory related to the lab Select Actions and choose Delete directory Type the domain name (DNS) of the directory in the empty box and press Delete Explanation:\nAccess the Directory Service Management Console. From the left sidebar, click on \u0026ldquo;Directories.\u0026rdquo; Locate and select the relevant Directory associated with the lab. Choose Actions and then select Delete directory. Enter the domain name (DNS) of the directory in the provided box. Confirm the deletion by clicking on Delete. Delete CloudFormation Stack Note: Deleting the CloudFormation Stack removes the resources created by it.\nIn this case, the HybridDNS stack has created two nested stacks, and deleting the HybridDNS stack will also remove the child stacks.\nAccess to CloudFormation Management Console\nIn the left sidebar, select Stacks\nTick the HybridDNS stack and select Delete\nIn the prompt, choose Delete stack\nWait for a few minutes while CloudFormation clears all resources\nExplanation:\nNote that deleting a CloudFormation Stack will result in the removal of the associated resources. Specifically, in this scenario, the HybridDNS stack has generated two nested stacks, which will also be deleted upon removing the HybridDNS stack. Access the CloudFormation Management Console. From the left sidebar, click on \u0026ldquo;Stacks.\u0026rdquo; Locate and select the HybridDNS stack. Choose Delete for stack removal. Confirm the action by selecting Delete stack in the prompt. Allow a few minutes for CloudFormation to complete the resource clearance. "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]